-- vim:ft=elm

------------------------------------------------------------------------------
-- This package is usually used alongside elm/http to talk to servers or
-- ports to talk to Javascript
------------------------------------------------------------------------------


import Json.Decode exposing(..)

------------------------------------------------------------------------------
-- primitive decoders
------------------------------------------------------------------------------
Json.Decode.decodeString Json.Decode.string """ "hello" """
--> Ok "hello" : Result Json.Decode.Error String

decodeString string """ "hello" """
--> Ok "hello" : Result Error String

decodeString string "true"
--> Err (...) : Result Error String


decodeString
--> <function> : Decoder a -> String -> Result Error a

string
--> <internals> : Decoder String

int
--> <internals> : Decoder Int

float
--> <internals> : Decoder Float

bool
--> <internals> : Decoder Bool


------------------------------------------------------------------------------
-- data structure decoders
------------------------------------------------------------------------------
decodeString (nullable int) "13"
--> Ok (Just 13) : Result Error (Maybe Int)

decodeString (nullable int) "null"
--> Ok Nothing : Result Error (Maybe Int)

decodeString (nullable int) "true"
--> Err (...) : Result Error (Maybe Int)

nullable int
--> <internals> : Decoder (Maybe Int)

list int
--> <internals> : Decoder (List Int)

array int
--> <internals> : Decoder (Array.Array Int)

dict int
--> <internals> : Decoder (Dict.Dict String Int)

keyValuePairs int
--> <internals> : Decoder (List ( String, Int ))


------------------------------------------------------------------------------
-- object related

-- field : String -> Decoder a -> Decoder a
field "x" int
--> <internals> : Decoder Int

-- at : List String -> Decoder a -> Decoder a
at ["a", "b"] int
--> <internals> : Decoder Int

-- index : Int -> Decoder a -> Decoder a
index 0 string
--> <internals> : Decoder String

decodeString (field "x" int) """ {"x": 3} """
--> Ok 3 : Result Error Int

decodeString (at ["x", "y"] int) """ {"x": {"y": 1}} """
--> Ok 1 : Result Error Int

decodeString (field "x" (field "y" int)) """ {"x": {"y": 1}} """
--> Ok 1 : Result Error Int

decodeString (index 0 string) """ ["wallace", "daisy"] """
--> Ok "wallace" : Result Error String

decodeString (at ["x", "y"] (index 0 string)) """ {"x": {"y": ["a", "b"]}} """
--> Ok "a" : Result Error String

------------------------------------------------------------------------------
-- map
map : (a -> value) -> Decoder a -> Decoder value
map2 : (a -> b -> value) -> Decoder a -> Decoder b -> Decoder value

-- examples:
-- map
stringLength : Decoder Int
stringLength =
  map String.length string

decodeString stringLength """ "hello" """
--> Ok 5 : Result Error Int


-- map3
type alias Person = {name : String, age : Int, height : Float}

person : Decoder Person
person =
  map3 Person
    (at ["name"] string)
    (at ["info","age"] int)
    (at ["info","height"] float)

decodeString person """ {"name": "tom", "info": {"age": 42, "height": 1.8}} """
--> Ok { age = 42, height = 1.8, name = "tom" } : Result Error Person


