-- vim:ft=haskell

-- Map is internally implemented with trees

-- Data.Maps exports functions that clash with the Preclude and Data.List ones.
import qualified Data.Map as Map


-- Map.fromList :: (Ord k) => [(k, v)] -> Map.Map k v
Map.fromList [("betty","555-2938"),("bonnie","452-2928")]
-- > fromList [("betty","555-2938"),("bonnie","452-2928")]

Map.fromList [(1,2),(3,4),(3,2),(5,5)]
-- > fromList [(1,2),(3,2),(5,5)]

Map.empty -- > fromList []
Map.insert 3 100 Map.empty -- > fromList [(3,100)]
Map.insert 5 600 (Map.insert 4 200 ( Map.insert 3 100  Map.empty))
-- > fromList [(3,100),(4,200),(5,600)]
Map.insert 5 600 . Map.insert 4 200 . Map.insert 3 100 $ Map.empty
-- > fromList [(3,100),(4,200),(5,600)]

-- it's easy to implement Map.fromList
fromList' :: Ord k => [(k,v)] -> Map.Map k v
fromList' = foldr (\(k,v) acc -> Map.insert k v acc) Map.empty

Map.null Map.empty -- > True
Map.null $ Map.fromList [(2,3),(5,5)] -- > False

Map.size Map.empty -- > 0
Map.size $ Map.fromList [(2,4),(3,3),(4,2),(5,4),(6,4)] -- > 5

Map.singleton 3 9 -- > fromList [(3,9)]
Map.insert 5 9 $ Map.singleton 3 9 -- > fromList [(3,9),(5,9)]

Map.member 3 $ Map.fromList [(3,6),(4,3),(6,9)] -- > True
Map.member 3 $ Map.fromList [(2,5),(4,5)] -- > False

Map.map (*100) $ Map.fromList [(1,1),(2,4),(3,9)]
-- > fromList [(1,100),(2,400),(3,900)]

Map.filter isUpper $ Map.fromList [(1,'a'),(2,'A'),(3,'b'),(4,'B')]
-- > fromList [(2,'A'),(4,'B')]

Map.toList . Map.insert 9 2 $ Map.singleton 4 3
-- > [(4,3),(9,2)]

-- fromListWith is a cool little function. It acts like fromList,
-- only it doesn't discard duplicate keys but it uses
-- a function supplied to it to decide what to do with them
phoneBook =   
  [("betty","555-2938")  
  ,("betty","342-2492")  
  ,("bonnie","452-2928")  
  ,("patsy","493-2928")  
  ,("patsy","943-2929")  
  ,("patsy","827-9162")  
  ,("lucille","205-2928")  
  ,("wendy","939-8282")  
  ,("penny","853-2492")  
  ,("penny","555-2111")  
  ]
phoneBookToMap :: (Ord k) => [(k, String)] -> Map.Map k String  
phoneBookToMap xs = Map.fromListWith (\n1 n2 -> n1 ++ ", " ++ n2) xs

Map.lookup "patsy" $ phoneBookToMap phoneBook
-- > "827-9162, 943-2929, 493-2928"
Map.lookup "wendy" $ phoneBookToMap phoneBook
-- > "939-8282"

-- another solution
phoneBookToMap :: (Ord k) => [(k, a)] -> Map.Map k [a]
phoneBookToMap xs = Map.fromListWith (++) $ map (\(k,v) -> (k,[v])) xs

Map.lookup "patsy" $ phoneBookToMap phoneBook
-- > ["827-9162","943-2929","493-2928"]

-- if only deal with numbers
Map.fromListWith max [(2,3),(2,5),(2,100),(3,29),(3,22),(3,11),(4,22),(4,15)]
-- > fromList [(2,100),(3,29),(4,22)]

Map.fromListWith (+) [(2,3),(2,5),(2,100),(3,29),(3,22),(3,11),(4,22),(4,15)]
-- > fromList [(2,108),(3,62),(4,37)]

Map.insertWith (+) 3 100 $ Map.fromList [(3,4),(5,103),(6,339)]
-- > fromList [(3,104),(5,103),(6,339)]



