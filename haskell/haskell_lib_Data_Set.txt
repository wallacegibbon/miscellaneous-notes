-- vim:ft=haskell

-- names in Data.Set clash with a lot of Prelude and Data.List names, so
import qualified Data.Set as Set

Set.fromList "hello" -- > fromList "ehlo"
Set.fromList "who"   -- > fromList "how"

Set.intersection (fromList "hello") $ fromList "who" -- > fromList "ho"
Set.union (fromList "hello") $ fromList "how" -- > fromList "ehlow"

-- difference depend on the order of arguments
Set.difference (fromList "hello") $ fromList "who" -- > fromList "el"
Set.difference (fromList "how") $ fromList "hello" -- > fromList "w"

Set.null Set.empty -- > True
Set.null $ Set.fromList [3,4,5,5,4,3] -- > False
Set.size $ Set.fromList [3,4,5,3,4,5] -- > 3
Set.singleton 9 -- > fromList [9]
Set.insert 4 $ Set.fromList [9,3,8,1] -- > fromList [1,3,4,8,9]
Set.insert 8 $ Set.fromList [5..10] -- > fromList [5,6,7,8,9,10]
Set.delete 4 $ Set.fromList [3,4,5,4,3,4,5] -- > fromList [3,5]

-- subset
Set.fromList [2,3,4] `Set.isSubsetOf` Set.fromList [1,2,3,4,5]
-- > True
Set.fromList [1,2,3,4,5] `Set.isSubsetOf` Set.fromList [1,2,3,4,5]
-- > True
Set.fromList [1,2,3,4,5] `Set.isProperSubsetOf` Set.fromList [1,2,3,4,5]
-- > False
Set.fromList [2,3,4,8] `Set.isSubsetOf` Set.fromList [1,2,3,4,5]
-- > False

Set.map (+1) $ Set.fromList [3,4,5,6,7,2,3,4]
-- > fromList [3,4,5,6,7,8]
Set.filter odd $ Set.fromList [3,4,5,6,7,2,3,4]
-- > fromList [3,5,7]

Set.toList $ Set.fromList "HEY WHATS CRACKALACKIN" -- this is faster than nub
-- > " ACEHIKLNRSTWY"

